{
  "name": "frep",
  "description": "A find and replace utility. Modify strings by passing an array or object of RegExp or string replacement patterns",
  "version": "0.1.8",
  "homepage": "https://github.com/jonschlinkert/frep",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jonschlinkert/frep.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/frep/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jonschlinkert/frep/blob/master/LICENSE-MIT"
    }
  ],
  "main": "index.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "keywords": [
    "find",
    "and",
    "replace",
    "javascript",
    "regex",
    "match",
    "regular",
    "expression",
    "js",
    "pattern",
    "regexp",
    "expressions",
    "replacement",
    "patterns",
    "replacements"
  ],
  "dependencies": {
    "lodash": "~2.4.1"
  },
  "devDependencies": {
    "underscore.string": "~2.3.3",
    "chai": "~1.9.0",
    "mocha": "~1.17.1"
  },
  "readme": "# frep [![NPM version](https://badge.fury.io/js/frep.png)](http://badge.fury.io/js/frep)\r\n\r\n> A find and replace utility. Modify strings by passing an array of RegExp or string replacement patterns\r\n\r\n\r\n## Quickstart\r\n\r\n```bash\r\nnpm i frep --save\r\n```\r\n\r\n```js\r\nvar frep = require('frep');\r\n\r\n// Transform a string with an array of replacement patterns\r\nfrep.strWithArr(String, replacements);\r\n// Transform an array of strings with an array of replacement patterns\r\nfrep.arrWithArr(Array,  replacements);\r\n// Transform a string with an object of replacement patterns\r\nfrep.strWithObj(String, replacements);\r\n// Transform an array of strings with an object of replacement patterns\r\nfrep.arrWithObj(Array,  replacements);\r\n```\r\n\r\n\r\n\r\n## Methods\r\n\r\n### .strWithArr( string, array )\r\nTransform a string with an array of replacement patterns.\r\n\r\n```js\r\nfrep.strWithArr(String, Array)\r\n```\r\n\r\nParameters:\r\n\r\n* `String`: The string to modify with the given replacement patterns.\r\n* `Array`: Array of objects containing the replacement patterns, each including a `pattern` property (which can be a string or a RegExp), and a `replacement` property (which can be a string or a function to be called for each match).\r\n* A new string is returned with some or all matches replaced by the given replacement patterns.\r\n\r\n**Example 1**\r\n\r\nGiven the following:\r\n\r\n```js\r\nvar str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\nvar patterns = [\r\n  {\r\n    pattern: /[ABC]/g,\r\n    replacement: '###'\r\n  },\r\n  {\r\n    pattern: /[XYZ]/g,\r\n    replacement: '$$$'\r\n  },\r\n  ...\r\n];\r\n\r\nfrep.strWithArr(str, patterns));\r\n// => #########DEFGHIJKLMNOPQRSTUVW$$$$$$$$$\r\n```\r\n\r\n### patterns as arrays\r\n\r\nPatterns may also be arrays. When replacement patterns are formatted as arrays Frep will first transform the array into a corresponding RegExp group:\r\n\r\n**Example 2**\r\n\r\n```js\r\n['[ABC]', '[XYZ]']\r\n```\r\ngets converted to:\r\n\r\n```js\r\n /([ABC]|[XYZ])/gi\r\n ```\r\n\r\n**Example 3**\r\n\r\nSo the following will produce a similar result to **Example 1**, except `###` is used to replace all patterns:\r\n\r\n```js\r\nvar str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\nvar patterns = [\r\n  {\r\n    pattern: ['[ABC]', '[XYZ]'],\r\n    replacement: '###'\r\n  }\r\n];\r\n\r\nfrep.strWithArr(str, patterns));\r\n// => #########DEFGHIJKLMNOPQRSTUVW#########\r\n```\r\n\r\n### .arrWithArr( array, array )\r\nTransform an array of strings with an array of replacement patterns\r\n\r\n```js\r\nfrep.arrWithArr( Array, Array )\r\n```\r\n\r\nParameters:\r\n\r\n* `Array`: The string to modify with the given replacement patterns.\r\n* `Array`: Same as `replacStr`, this is an an array of objects containing the replacement patterns, each including a `pattern` property, which can be a string or a RegExp, and a `replacement` property, which can be a string or a function to be called for each match.\r\n* A new array of strings is returned with some or all matches replaced by the given replacement patterns.\r\n\r\nGiven the following:\r\n\r\n**Example 4**\r\n\r\n```js\r\nvar arr = [\r\n  'Jon Schlinkert',\r\n  'Brian Woodward'\r\n];\r\nvar patterns = [\r\n  {\r\n    pattern: /(B|S)/g,\r\n    replacement: '###'\r\n  },\r\n  {\r\n    pattern: /(J|W)/g,\r\n    replacement: '$$$'\r\n  },\r\n  ...\r\n];\r\n\r\nfrep.arrWithArr(arr, patterns));\r\n// => [\"$$$on ###chlinkert\", \"###rian $$$oodward\"]\r\n```\r\n\r\nAn array of new strings is returned, with some or all matches in each string replaced by the given replacement strings.\r\n\r\n\r\n\r\n### .strWithObj( string, object )\r\nTransform a string with an object of replacement patterns\r\n\r\n```js\r\nfrep.strWithObj( String, Object )\r\n```\r\n\r\nParameters:\r\n\r\n* `String`: The string to modify with the given replacement patterns.\r\n* `Object`: Object of replacement patterns, where each key is a string or a RegExp `pattern`, and each value is the `replacement` string or function to be called for each match.\r\n* A new string is returned with some or all matches replaced by the given replacement patterns.\r\n\r\n**Example 5**\r\n\r\nGiven the following:\r\n\r\n```js\r\nvar str = 'ABC'\r\nvar replacements = {\r\n  'A': 'AAA',\r\n  'B': 'BBB',\r\n  'C': 'CCC',\r\n  'D': 'DDD',\r\n  'E': 'EEE',\r\n  'F': 'FFF'\r\n};\r\n\r\nfrep.strWithObj(str, replacements));\r\n// => AAABBBCCC\r\n```\r\n\r\n\r\n### .arrWithObj( array, object )\r\nTransform an array of strings with an object of replacement patterns\r\n\r\n```js\r\nfrep.arrWithObj(Array, Object)\r\n```\r\n\r\nParameters:\r\n\r\n* `Array`: The array of strings to modify with the given replacement patterns.\r\n* `Object`: Object of replacement patterns, where each key is a string or a RegExp `pattern`, and each value is the `replacement` string or function to be called for each match.\r\n* A new array of strings is returned with some or all matches replaced by the given replacement patterns.\r\n\r\n**Example 6**\r\n\r\nGiven the following:\r\n\r\n```js\r\nvar arr = ['ABC', 'DEF'];\r\nvar replacements = {\r\n  'A': 'AAA',\r\n  'B': 'BBB',\r\n  'C': 'CCC',\r\n  'D': 'DDD',\r\n  'E': 'EEE',\r\n  'F': 'FFF'\r\n};\r\n\r\nfrep.arrWithObj(arr, replacements));\r\n// => ['AAABBBCCC', 'DDDEEEFFF']\r\n```\r\n\r\n## Usage example\r\n\r\n### Uses frep.strWithArray( string, array )\r\n\r\n> Slugify URL segments using frep\r\n\r\nTo run the example, first do: `npm install frep underscore.string`\r\n\r\n```js\r\nvar frep = require('frep');\r\n\r\n// We'll use underscore string's slugify function for the first example\r\nvar _str = require('underscore.string');\r\n\r\n// A custom slugification function for the second\r\nvar slugger = function(str) {\r\n  return str.replace(/( |-|\\.)/g, '_').toLowerCase();\r\n};\r\n\r\n// And a third slugification function for the last example\r\nvar sluggifier = function(str) {\r\n  return str.replace(/( |\\.)/g, '-');\r\n};\r\n\r\n// This is an object of data, where each property will be used\r\n// to build up a URL that needs to be slugified.  e.g.\r\n// => /foo/bar/baz\r\n// (in reality, you would probably have an array of objects like this)\r\nvar obj = {\r\n  foo: 'This is foo.',\r\n  bar: 'ThIs iS bAr.',\r\n  baz: 'THIS is BAZ.',\r\n};\r\n\r\n// Our custom replacement patterns. These are used to\r\n// transform the data from each property\r\nvar patterns = [\r\n  {\r\n    pattern: /:foo/g,\r\n    replacement: _str.slugify(obj.foo) // underscore.string\r\n  },\r\n  {\r\n    pattern: /:bar/g,\r\n    replacement: slugger(obj.bar)  // custom function #1\r\n  },\r\n  {\r\n    pattern: /:baz/g,\r\n    replacement: sluggifier(obj.baz)  // custom function #2\r\n  }\r\n];\r\n\r\n// The first argument, a string, will be our \"structure\",\r\n// which will determine where the values from each property\r\n// will be placed. Run frep to see what happens!\r\nconsole.log(frep.strWithArr(':foo/:bar/:baz', patterns));\r\n```\r\n\r\n\r\n## Author\r\n\r\n**[Jon Schlinkert](http://github/jonschlinkert)**\r\n\r\n+ [github/jonschlinkert](http://github/jonschlinkert)\r\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\r\n\r\n\r\n## License\r\nCopyright (c) 2014 [Jon Schlinkert](http://github/jonschlinkert), contributors.\r\nLicensed under the [MIT license](LICENSE-MIT).",
  "readmeFilename": "README.md",
  "_id": "frep@0.1.8",
  "_shasum": "b5185efa5662e6ac6f4206a4e18d0967f21219da",
  "_from": "frep@~0.1.2",
  "_resolved": "https://registry.npmjs.org/frep/-/frep-0.1.8.tgz"
}
