{
  "name": "handlebars-helper-prettify",
  "version": "0.2.1",
  "description": "{{prettify}} handlebars helper for formatting (beautifying) HTML, JavaScript and CSS.",
  "main": "index.js",
  "homepage": "https://github.com/helpers/handlebars-helper-prettify",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/helpers/handlebars-helper-prettify.git"
  },
  "bugs": {
    "url": "https://github.com/helpers/handlebars-helper-prettify/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/helpers/handlebars-helper-prettify/blob/master/LICENSE-MIT"
    }
  ],
  "dependencies": {
    "lodash": "~2.3.0",
    "js-beautify": "~1.4.2"
  },
  "devDependencies": {
    "assemble": "~0.4.23",
    "assemble-yaml": "~0.2.1",
    "grunt": "~0.4.1",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-jshint": "~0.7.1",
    "grunt-contrib-nodeunit": "~0.2.2",
    "grunt-mocha-test": "~0.7.0",
    "grunt-readme": "~0.2.4",
    "grunt-sync-pkg": "~0.1.1",
    "handlebars": "~1.1.2",
    "should": "~2.1.0"
  },
  "keywords": [
    "beautify",
    "convenience methods",
    "filter",
    "format html",
    "handlebars helper",
    "helper",
    "js-beautify",
    "lodash",
    "mixin",
    "prettify",
    "swig filter",
    "template filter",
    "underscore mixin",
    "underscore"
  ],
  "readme": "# {{prettify}} [![NPM version](https://badge.fury.io/js/prettify.png)](http://badge.fury.io/js/prettify) \r\n\r\n> {{prettify}} handlebars helper for formatting (beautifying) HTML, JavaScript and CSS.\r\n\r\nThis helper depends on and extends [js-beautify](https://github.com/einars/js-beautify). Please visit and star that project to show your support.\r\n\r\n[Also see examples â†’](./EXAMPLES.md)\r\n\r\n## Getting Started\r\nIn the root of the project in which you plan to use the helper, in the command line run:\r\n\r\n```bash\r\nnpm i prettify --save\r\n```\r\n\r\nUse within your application with the following line of JavaScript:\r\n\r\n```js\r\nvar helpers = require('prettify');\r\n```\r\n\r\nNow your handlebars instance will have access to the {{prettify}} helper.\r\n\r\n\r\n\r\n\r\n## Options\r\n#### Defining options\r\n\r\nAll options from [js-beautify](https://github.com/einars/js-beautify) are available in this helper, as well as a few custom options that were specially created for this helper. The helper comes with some sensible defaults (in the humble opinion of the helper creator), but it's easy to customize them if you need to. Here are are two (convenient) ways to set options:\r\n\r\n* **options object**: pass an options object to the helper as a parameter. E.g. `{{#prettify opts.obj}}`.\r\n* **options hash**: this is an easy way to set options on the helper, and it also gives you granular control over how the helper renders content.\r\n* **Gruntfile**: if you use both [Grunt](http://gruntjs.com/) and [Assemble](http://assemble.io), you can define options in the Assemble task options of your project's Gruntfile.\r\n\r\n\r\n##### options hash\r\nBy design, options define here will override options defined anywhere else. This approach also provides granular control over options, allowing you to defined different options on multiple instances of the helper in the same file.\r\n\r\nExample:\r\n\r\n```handlebars\r\n{{#prettify condense='true'}}\r\n  {{> header }}\r\n{{/prettify}}\r\n\r\n{{#prettify padcomments='true'}}\r\n  {{> body }}\r\n{{/prettify}}\r\n\r\n{{#prettify condense='true'}}\r\n  {{> footer }}\r\n{{/prettify}}\r\n```\r\n\r\n\r\n##### \"assemble\" task options\r\nThe helper can be used without [Grunt](http://gruntjs.com/) or [Assemble](http://assemble.io). But if you happen to use these two awesome tools you can define options for the helper in your Gruntfile in the `prettify` sub-options for Assemble:\r\n\r\n```javascript\r\ngrunt.initConfig({\r\n  assemble: {\r\n    options: {\r\n      prettify: {\r\n        mode: 'js',  // 'html' is defined by default\r\n        condense: true,\r\n        padcomments: true,\r\n        indent: 4\r\n      }\r\n    },\r\n    ...\r\n  }\r\n});\r\n```\r\n\r\nOptions defined in the Assemble task can be viewed as custom \"global\" defaults, which can be overridden by options defined in the options hash.\r\n\r\n\r\n#### option defaults\r\n\r\nThe following options are passed to [js-beautify](https://github.com/einars/js-beautify). The defaults are shown for each option.\r\n\r\n###### \"html\" mode\r\n\r\nThese options are available by default (see [detailed HTML options](./OPTIONS.md)):\r\n\r\n```js\r\n{\r\n  \"brace_style\": \"expand\",      // collapse|expand|end-expand\r\n  \"indent-scripts\": \"normal\",   // keep|separate|normal\r\n  \"indent_char\": \" \",           // (default: space) Indentation character. Can be an actual tab or space\r\n  \"indent_handlebars\": false,   // format and indent {{#foo}}...{{/foo}}\r\n  \"indent_inner_html\": false,   // Indent <head> and <body> sections\r\n  \"indent_size\": 2,             // Indentation size\r\n  \"max_preserve_newlines\": 5,   // Maximum number of line-breaks to be preserved in one chunk\r\n  \"preserve_newlines\": true,    // Preserve existing line-breaks\r\n  \"unformatted\": [\"a\", \"sub\", \"sup\", \"b\", \"i\", \"u\"], // List of tags that should not be reformatted (inline elements included by default)\r\n  \"wrap_line_length\": 78,       // Maximum characters per line (0 disables this)\r\n\r\n  // custom options made for this helper\r\n  \"indent\": 2,          // convenience alias for indent_size\r\n  \"condense\": false,    // remove extra newlines missed by js-beautify.\r\n  \"padcomments\": false  // add an extra newline above each HTML code comment\r\n}\r\n```\r\n\r\n###### \"js\" mode\r\n\r\nWhen `mode` is set to `js`, the following options are available:\r\n\r\n```js\r\n{\r\n  \"brace_style\": \"collapse\",\r\n  \"break_chained_methods\": false,\r\n  \"eval_code\": false,\r\n  \"indent\": 2,\r\n  \"indent_char\": \" \",\r\n  \"indent_level\": 0,\r\n  \"indent_size\": 2,\r\n  \"indent_with_tabs\": false,\r\n  \"jslint_happy\": false,\r\n  \"keep_array_indentation\": false,\r\n  \"keep_function_indentation\": false,\r\n  \"max_preserve_newlines\": 10,\r\n  \"preserve_newlines\": true,\r\n  \"space_before_conditional\": true,\r\n  \"unescape_strings\": false,\r\n  \"wrap_line_length\": 0\r\n}\r\n```\r\n\r\n###### \"css\" mode\r\n\r\nWhen `mode` is set to `css`, the following options are available:\r\n\r\n```js\r\n{\r\n  \"end_with_newline\": false,\r\n  \"indent\": 2,\r\n  \"indent_char\": \" \",\r\n  \"indent_size\": 2,\r\n  \"selector_separator\": \"\"\r\n}\r\n```\r\n\r\n#### custom options\r\n\r\n> Options created specially for this helper\r\n\r\n##### mode\r\nType: `String`\r\nDefault value: `html` (valid modes: `html`|`js`|`css`)\r\n\r\nOnly necessary if you want to format CSS or JavaScript (e.g. you must specify either `js` or `css` respectively). Example:\r\n\r\n```handlebars\r\n{{#prettify mode=\"js\" indent=4}}\r\nfunction foo(str) {return str;}\r\n{{/prettify}}\r\n```\r\n\r\nAssemble options:\r\n\r\n```js\r\nassemble: {\r\n  options: {\r\n    prettify: {\r\n      // options for default 'html' mode go here\r\n      js: {\r\n        // options for 'js' mode go here\r\n      },\r\n      css: {\r\n        // options for 'css' mode go here\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n##### indent\r\n_Alias for `indent_size`_.\r\nType: `Number`\r\nDefault value: `2`\r\n\r\nNumber of spaces or tabs to indent the generated code. This option is an _alias for `indent_size`_.\r\n\r\n##### condense\r\nType: `Boolean`\r\nDefault value: `true`\r\n\r\nRemoves extra newlines and retains indenting:\r\n\r\n##### padcomments\r\nType: `Boolean`\r\nDefault value: `True`\r\n\r\nAdd a newline above each code comment:\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Document</title>\r\n  </head>\r\n  <body>\r\n\r\n    <!-- code comment -->\r\n    <h1>My Blog</h1>\r\n    <h2>Post of the day</h2>\r\n\r\n    <!-- scripts -->\r\n    <a href=\"#\">Read more...</a>\r\n  </body>\r\n</html>\r\n```\r\n\r\n\r\n## Contributing\r\nPlease see the [Contributing to Assemble](http://assemble.io/contributing) guide for information on contributing to this project.\r\n\r\n## Author\r\n\r\n+ [github.com/jonschlinkert](https://github.com/jonschlinkert)\r\n+ [twitter.com/jonschlinkert](http://twitter.com/jonschlinkert)\r\n\r\n## Related Projects and Links\r\n\r\n+ [handlebars-helpers](https://github.com/assemble/handlebars-helpers)\r\n+ [helpers](https://github.com/helpers): some great handlebars helpers that we decided not to include in the [handlebars-helpers](https://github.com/assemble/handlebars-helpers) project, most likely because the code footprint was too big or the helper wasn't generic enough.\r\n+ [grunt-prettify](https://github.com/jonschlinkert/grunt-prettify)\r\n\r\n## License\r\nCopyright (c) 2013 Jon Schlinkert, contributors.\r\nReleased under the MIT license\r\n\r\n***\r\n\r\n_This file was generated on Thu Nov 14 2013 02:25:44._\r\n",
  "readmeFilename": "README.md",
  "_id": "handlebars-helper-prettify@0.2.1",
  "_shasum": "2daee049a1b8768acb5d17e93ac83961af340969",
  "_from": "handlebars-helper-prettify@~0.2.1",
  "_resolved": "https://registry.npmjs.org/handlebars-helper-prettify/-/handlebars-helper-prettify-0.2.1.tgz"
}
