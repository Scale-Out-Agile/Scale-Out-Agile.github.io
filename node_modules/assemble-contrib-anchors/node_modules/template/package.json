{
  "name": "template",
  "description": "Process Lo-dash templates recursively.",
  "version": "0.1.8",
  "homepage": "https://github.com/jonschlinkert/template",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jonschlinkert/template.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/template/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jonschlinkert/template/blob/master/LICENSE-MIT"
    }
  ],
  "main": "index.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "delims": "~0.1.4",
    "fs-utils": "~0.4.1",
    "lodash": "~2.4.1",
    "underscore.string": "~2.3.3"
  },
  "devDependencies": {
    "chai": "~1.9.1",
    "mocha": "~1.18.2"
  },
  "keywords": [
    "lodash",
    "process",
    "recurse",
    "recursively",
    "template",
    "templates",
    "underscore"
  ],
  "readme": "# template [![NPM version](https://badge.fury.io/js/template.png)](http://badge.fury.io/js/template)\r\n\r\n> An easy-to-use [Lo-Dash template](http://lodash.com/docs#template) processing library.\r\n\r\n## Quickstart\r\n\r\nInstall with [npm](npmjs.org):\r\n\r\n```bash\r\nnpm i template --save\r\n```\r\n\r\n## Methods\r\n\r\n### template\r\n\r\nBy default the `template()` method expects the following parameters:\r\n\r\n```js\r\ntemplate(text, data, [options])\r\n```\r\n\r\nFor example, the following:\r\n\r\n```js\r\nvar template = require('template');\r\n\r\ntemplate('Name: <%= name %>', {name: 'Jon'});\r\n```\r\nresults in:\r\n\r\n```\r\nName: Jon\r\n```\r\n\r\n### template.read\r\n\r\nTo read a file from the file system before processing, use `template.read`:\r\n\r\n```js\r\ntemplate.read('file.md', data, options);\r\n```\r\n\r\n### template.copy\r\n\r\nA convenience method for synchronously copying files from A to B.\r\n\r\n```js\r\ntemplate.copy(src, dest, data, options);\r\n```\r\n\r\nPass `{process: false}` to the options disable template processing.\r\n\r\n\r\n## Options\r\nTemplate supports all [Lo-Dash template](http://lodash.com/docs#template) options, as well as a few extras.\r\n\r\n### custom delimiters\r\nAll of the options from the [delims](https://github.com/jonschlinkert/delims) library may be passed to the options object.\r\n\r\nFor example, this:\r\n\r\n```js\r\ntemplate('Hi, my name is {%= name %}', {name: 'Jon Schlinkert'}, {delims: ['{%', '%}']});\r\n```\r\n\r\nResults in:\r\n\r\n```\r\nHi, my name is Jon Schlinkert\r\n```\r\n\r\n## Valid templates\r\nAny of the following expressions may be used in templates:\r\n\r\n```js\r\n// Strings\r\n\"foo\"\r\n\r\n// Property strings\r\nfoo\r\nfoo.bar\r\nfoo.bar.baz\r\n\r\n// Method calls, passed as properties on the data object\r\none()\r\ntwo.three()\r\n\r\n// Lo-Dash Mixins\r\n_.foo()\r\n_.foo(bar)\r\n_.foo(\"baz\")\r\n```\r\n\r\n## 3rd Party Libs\r\n\r\n**[underscore.string][str]**\r\n\r\nAll of the methods from [underscore.string][str] are available on the `_.str` object. Additionally, all of the _non-conflicting_ methods are available on the `_` Lo-Dash namespace. See the [underscore.string documentation][str-docs] for more details.\r\n\r\n\r\n## Authors\r\n**Jon Schlinkert**\r\n\r\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\r\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\r\n\r\n**Brian Woodward**\r\n\r\n+ [github/doowb](https://github.com/doowb)\r\n+ [twitter/doowb](http://twitter.com/jonschlinkert)\r\n\r\n\r\n## License\r\nCopyright (c) 2014 [Jon Schlinkert](http://twitter.com/jonschlinkert), [Brian Woodward](http://twitter.com/doowb), contributors.\r\nReleased under the [MIT license](./LICENSE-MIT)\r\n\r\n[str]: https://github.com/epeli/underscore.string\r\n[str-docs]: https://github.com/epeli/underscore.string#nodejs-installation",
  "readmeFilename": "README.md",
  "_id": "template@0.1.8",
  "_shasum": "17cac0ee7a0eff58dd6b8f18ea6b05a071174fc2",
  "_from": "template@~0.1.5",
  "_resolved": "https://registry.npmjs.org/template/-/template-0.1.8.tgz"
}
